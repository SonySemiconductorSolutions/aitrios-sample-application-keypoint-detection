# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SmartCamera

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class KeyPoint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KeyPoint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKeyPoint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KeyPoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KeyPoint
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # KeyPoint
    def PointType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # KeyPoint
    def Point(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # KeyPoint
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def KeyPointStart(builder):
    builder.StartObject(4)

def Start(builder):
    KeyPointStart(builder)

def KeyPointAddScore(builder, score):
    builder.PrependFloat32Slot(0, score, 0.0)

def AddScore(builder, score):
    KeyPointAddScore(builder, score)

def KeyPointAddPointType(builder, pointType):
    builder.PrependUint8Slot(1, pointType, 0)

def AddPointType(builder, pointType):
    KeyPointAddPointType(builder, pointType)

def KeyPointAddPoint(builder, point):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(point), 0)

def AddPoint(builder, point):
    KeyPointAddPoint(builder, point)

def KeyPointAddName(builder, name):
    builder.PrependInt8Slot(3, name, 0)

def AddName(builder, name):
    KeyPointAddName(builder, name)

def KeyPointEnd(builder):
    return builder.EndObject()

def End(builder):
    return KeyPointEnd(builder)
